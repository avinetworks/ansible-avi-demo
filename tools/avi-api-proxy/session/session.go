package session

import (
	"bytes"
	"crypto/tls"
	"encoding/json"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"net/http"
	"net/http/httputil"
	"reflect"
	"time"

	"github.com/golang/glog"
)

type AviResult struct {
	// Code should match the HTTP status code.
	Code int `json:"code"`

	// Message should contain a short description of the result of the requested
	// operation.
	Message *string `json:"message"`
}

// AviError represents an error resulting from a request to the Avi Controller
type AviError struct {
	// aviresult holds the standard header (code and message) that is included in
	// responses from Avi.
	AviResult

	// verb is the HTTP verb (GET, POST, PUT, PATCH, or DELETE) that was
	// used in the request that resulted in the error.
	Verb string

	// url is the URL that was used in the request that resulted in the error.
	Url string

	// HttpStatusCode is the HTTP response status code (e.g., 200, 404, etc.).
	HttpStatusCode int

	// err contains a descriptive error object for error cases other than HTTP
	// errors (i.e., non-2xx responses), such as socket errors or malformed JSON.
	err error
}

// Error implements the error interface.
func (err AviError) Error() string {
	var msg string

	if err.err != nil {
		msg = fmt.Sprintf("error: %v", err.err)
	} else if err.Message != nil {
		msg = fmt.Sprintf("HTTP code: %d; error from Avi: %s",
			err.HttpStatusCode, *err.Message)
	} else {
		msg = fmt.Sprintf("HTTP code: %d.", err.HttpStatusCode)
	}

	return fmt.Sprintf("%s %s: %s", err.Verb, err.Url, msg)
}

//AviSession maintains a session to the specified Avi Controller
type AviSession struct {
	// host specifies the hostname or IP address of the Avi Controller
	host string

	// username specifies the username with which we should authenticate with the
	// Avi Controller.
	username string

	// password specifies the password with which we should authenticate with the
	// Avi Controller.
	password string

	// auth token generated by Django, for use in token mode
	authToken string

	// optional callback function passed in by the client which generates django auth token
	refreshAuthToken func() string

	// insecure specifies whether we should perform strict certificate validation
	// for connections to the Avi Controller.
	insecure bool

	// timeout specifies time limit for API request. Default value set to 60 seconds
	timeout time.Duration

	// optional tenant string to use for API request
	tenant string

	// optional version string to use for API request
	version string

	// internal: session id for this session
	sessionid string

	// internal: csrfToken for this session
	csrfToken string

	// internal: referer field string to use in requests
	prefix string

	// internal: re-usable transport to enable connection reuse
	transport *http.Transport

	// internal: reusable client
	client *http.Client
}

const DEFAULT_AVI_VERSION = "17.1.2"
const DEFAULT_API_TIMEOUT = time.Duration(60 * time.Second)
const DEFAULT_API_TENANT = "admin"

//NewAviSession initiates a session to AviController and returns it
func NewAviSession(host string, username string, options ...func(*AviSession) error) (*AviSession, error) {
	if flag.Parsed() == false {
		flag.Parse()
	}
	avisess := &AviSession{
		host:     host,
		username: username,
	}
	avisess.sessionid = ""
	avisess.csrfToken = ""
	avisess.prefix = "https://" + avisess.host + "/"
	avisess.tenant = ""
	avisess.insecure = false

	for _, option := range options {
		err := option(avisess)
		if err != nil {
			return avisess, err
		}
	}

	if avisess.tenant == "" {
		avisess.tenant = DEFAULT_API_TENANT
	}
	if avisess.version == "" {
		avisess.version = DEFAULT_AVI_VERSION
	}

	// create default transport object
	if avisess.transport == nil {
		avisess.transport = &http.Transport{
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
		}
	}

	// set default timeout
	if avisess.timeout == 0 {
		avisess.timeout = DEFAULT_API_TIMEOUT
	}

	// attach transport object to client
	avisess.client = &http.Client{
		Transport: avisess.transport,
		Timeout:   avisess.timeout,
	}
	err := avisess.initiateSession()
	return avisess, err
}

func (avisess *AviSession) initiateSession() error {
	if avisess.insecure == true {
		glog.Warning("Strict certificate verification is *DISABLED*")
	}

	// If refresh auth token is provided, use callback function provided
	if avisess.isTokenAuth() {
		if avisess.refreshAuthToken != nil {
			avisess.setAuthToken(avisess.refreshAuthToken())
		}
	}

	// initiate http session here
	// first set the csrf token
	var res interface{}
	rerror := avisess.get("", res)

	// now login to get session_id, csrfToken
	cred := make(map[string]string)
	cred["username"] = avisess.username

	if avisess.isTokenAuth() {
		cred["token"] = avisess.authToken
	} else {
		cred["password"] = avisess.password
	}

	avisess.csrfToken = ""
	avisess.sessionid = ""

	rerror = avisess.post("login", cred, res)
	if rerror != nil {
		return rerror
	}

	glog.Infof("response: %v", res)
	if res != nil && reflect.TypeOf(res).Kind() != reflect.String {
		glog.Infof("results: %v error %v", res.(map[string]interface{}), rerror)
	}

	return nil
}

// SetPassword - Use this for NewAviSession option argument for setting password
func SetPassword(password string) func(*AviSession) error {
	return func(sess *AviSession) error {
		return sess.setPassword(password)
	}
}

func (avisess *AviSession) setPassword(password string) error {
	avisess.password = password
	return nil
}

// SetVersion - Use this for NewAviSession option argument for setting version
func SetVersion(version string) func(*AviSession) error {
	return func(sess *AviSession) error {
		return sess.setVersion(version)
	}
}

func (avisess *AviSession) setVersion(version string) error {
	avisess.version = version
	return nil
}

// SetAuthToken - Use this for NewAviSession option argument for setting authToken
func SetAuthToken(authToken string) func(*AviSession) error {
	return func(sess *AviSession) error {
		return sess.setAuthToken(authToken)
	}
}

func (avisess *AviSession) setAuthToken(authToken string) error {
	avisess.authToken = authToken
	return nil
}

// SetAuthToken - Use this for NewAviSession option argument for setting authToken
func SetRefreshAuthTokenCallback(f func() string) func(*AviSession) error {
	return func(sess *AviSession) error {
		return sess.setRefreshAuthTokenCallback(f)
	}
}

func (avisess *AviSession) setRefreshAuthTokenCallback(f func() string) error {
	avisess.refreshAuthToken = f
	return nil
}

// SetTenant - Use this for NewAviSession option argument for setting tenant
func SetTenant(tenant string) func(*AviSession) error {
	return func(sess *AviSession) error {
		return sess.setTenant(tenant)
	}
}

func (avisess *AviSession) setTenant(tenant string) error {
	avisess.tenant = tenant
	return nil
}

// SetInsecure - Use this for NewAviSession option argument for allowing insecure connection to AviController
func SetInsecure(avisess *AviSession) error {
	avisess.insecure = true
	return nil
}

// SetTransport - Use this for NewAviSession option argument for configuring http transport to enable connection
func SetTransport(transport *http.Transport) func(*AviSession) error {
	return func(sess *AviSession) error {
		return sess.setTransport(transport)
	}
}

func (avisess *AviSession) setTransport(transport *http.Transport) error {
	avisess.transport = transport
	return nil
}

// SetTimeout -
func SetTimeout(timeout time.Duration) func(*AviSession) error {
	return func(sess *AviSession) error {
		return sess.setTimeout(timeout)
	}
}

func (avisess *AviSession) setTimeout(timeout time.Duration) error {
	avisess.timeout = timeout
	return nil
}

func (avisess *AviSession) isTokenAuth() bool {
	return avisess.authToken != "" || avisess.refreshAuthToken != nil
}

func (avisess *AviSession) checkRetryForSleep(retry int, verb string, url string, lastErr *AviError) *AviError {
	if retry == 0 {
		return nil
	} else if retry == 1 {
		time.Sleep(100 * time.Millisecond)
	} else if retry == 2 {
		time.Sleep(500 * time.Millisecond)
	} else if retry == 3 {
		time.Sleep(1 * time.Second)
	} else if retry > 3 {
		if lastErr != nil {
			glog.Errorf("Aborting after retries. Last error %v", lastErr)
			return lastErr
		}
		errorResult := &AviError{Verb: verb, Url: url}
		errorResult.err = fmt.Errorf("tried 3 times and failed")
		return errorResult
	}
	return nil
}

func (avisess *AviSession) newAviRequest(verb string, url string, payload io.Reader, tenant string) (*http.Request, *AviError) {
	req, err := http.NewRequest(verb, url, payload)
	errorResult := &AviError{Verb: verb, Url: url}
	if err != nil {
		errorResult.err = fmt.Errorf("http.NewRequest failed: %v", err)
		return nil, errorResult
	}
	req.Header.Set("Content-Type", "application/json")
	//req.Header.Set("Accept", "application/json")
	req.Header.Set("X-Avi-Version", avisess.version)
	if tenant == "" {
		tenant = avisess.tenant
	}
	if avisess.csrfToken != "" {
		req.Header["X-CSRFToken"] = []string{avisess.csrfToken}
		req.AddCookie(&http.Cookie{Name: "csrftoken", Value: avisess.csrfToken})
	}
	if avisess.prefix != "" {
		req.Header.Set("Referer", avisess.prefix)
	}
	if tenant != "" {
		req.Header.Set("X-Avi-Tenant", tenant)
	}

	if avisess.sessionid != "" {
		req.AddCookie(&http.Cookie{Name: "sessionid", Value: avisess.sessionid})
		req.AddCookie(&http.Cookie{Name: "avi-sessionid", Value: avisess.sessionid})
	}
	return req, errorResult
}

//
// Helper routines for REST calls.
//

func (avisess *AviSession) collectCookiesFromResp(resp *http.Response) {
	// collect cookies from the resp
	for _, cookie := range resp.Cookies() {
		if cookie.Name == "csrftoken" {
			avisess.csrfToken = cookie.Value
			glog.Infof("Set the csrf token to %v", avisess.csrfToken)
		}
		if cookie.Name == "sessionid" {
			avisess.sessionid = cookie.Value
		}
		if cookie.Name == "avi-sessionid" {
			avisess.sessionid = cookie.Value
		}
	}
}

func (avisess *AviSession) RestRequest(verb string, uri string, payload interface{}, tenant string) (*http.Response, *AviError) {
	return avisess.restRequest(verb, uri, payload, tenant, nil)
}

// restRequest makes a REST request to the Avi Controller's REST API.
// Returns a byte[] if successful
func (avisess *AviSession) restRequest(verb string, uri string, payload interface{}, tenant string, lastError *AviError,
	retryNum ...int) (*http.Response, *AviError) {
	url := avisess.prefix + uri
	// If optional retryNum arg is provided, then count which retry number this is
	retry := 0
	if len(retryNum) > 0 {
		retry = retryNum[0]
	}
	if errorResult := avisess.checkRetryForSleep(retry, verb, url, lastError); errorResult != nil {
		return nil, errorResult
	}
	var payloadIO io.Reader
	if payload != nil {
		jsonStr, err := json.Marshal(payload)
		if err != nil {
			return nil, &AviError{Verb: verb, Url: url, err: err}
		}
		payloadIO = bytes.NewBuffer(jsonStr)
	}

	req, errorResult := avisess.newAviRequest(verb, url, payloadIO, tenant)
	if errorResult.err != nil {
		return nil, errorResult
	}

	resp, err := avisess.client.Do(req)
	if err != nil {
		errorResult.err = fmt.Errorf("client.Do uri %v failed: %v", uri, err)
		dump, err := httputil.DumpRequestOut(req, true)
		debug(dump, err)
		return nil, errorResult
	}

	glog.Infof("Req for uri %v RespCode %v", uri, resp.StatusCode)

	errorResult.HttpStatusCode = resp.StatusCode
	avisess.collectCookiesFromResp(resp)

	retryReq := false
	if resp.StatusCode == 401 && len(avisess.sessionid) != 0 && uri != "login" {
		resp.Body.Close()
		err := avisess.initiateSession()
		if err != nil {
			return nil, &AviError{Verb: verb, Url: url, HttpStatusCode: resp.StatusCode, err: err}
		}
		retryReq = true
	}

	if retryReq {
		check, err := avisess.CheckControllerStatus()
		if check == false {
			glog.Errorf("restRequest Error during checking controller state %v", err)
			return nil, &AviError{Verb: verb, Url: url, HttpStatusCode: resp.StatusCode, err: err}
		}
		mretry := retry + 1
		// in case of client errors, skip retries but get the error msg
		if resp.StatusCode >= 400 && resp.StatusCode < 500 {
			mretry = retry + 4
		}
		// Doing this so that a new request is made to the
		return avisess.restRequest(verb, uri, payload, tenant, errorResult, mretry)
	}

	if resp.StatusCode == 204 {
		// no content in the response
		return resp, nil
	}

	return resp, nil
}

func (avisess *AviSession) fetchBody(verb, uri string, resp *http.Response) (result []byte, err error) {
	defer resp.Body.Close()
	url := avisess.prefix + uri
	errorResult := AviError{Verb: verb, Url: url}
	result, err = ioutil.ReadAll(resp.Body)

	if err == nil {
		if resp.StatusCode < 200 || resp.StatusCode > 299 {
			mres, merr := convertAviResponseToMapInterface(result)
			glog.Infof("Error code %v parsed resp: %v err %v",
				resp.StatusCode, mres, merr)
			emsg := fmt.Sprintf("%v", mres)
			errorResult.Message = &emsg
		} else {
			return result, nil
		}
	} else {
		errmsg := fmt.Sprintf("Response body read failed: %v", err)
		errorResult.Message = &errmsg
		glog.Errorf("Error in reading uri %v %v", uri, err)
	}

	return result, errorResult
}

func convertAviResponseToMapInterface(resbytes []byte) (interface{}, error) {
	var result interface{}
	err := json.Unmarshal(resbytes, &result)
	return result, err
}

func debug(data []byte, err error) {
	if err == nil {
		glog.Infof("%s\n\n", data)
	} else {
		glog.Errorf("%s\n\n", err)
	}
}

//Checking for controller up state.
//This is an infinite loop till the controller is in up state.
//Return true when controller is in up state.
func (avisess *AviSession) CheckControllerStatus() (bool, error) {
	url := avisess.prefix + "/api/cluster/status"
	//This is an infinite loop. Generating http request for a login URI till controller is in up state.
	for round := 0; round < 10; round++ {
		checkReq, err := http.NewRequest("GET", url, nil)
		if err != nil {
			glog.Errorf("CheckControllerStatus Error %v while generating http request.", err)
			return false, err
		}
		//Getting response from controller's API
		if stateResp, err := avisess.client.Do(checkReq); err == nil {
			defer stateResp.Body.Close()
			//Checking controller response
			if stateResp.StatusCode != 503 && stateResp.StatusCode != 502 && stateResp.StatusCode != 500 {
				break
			} else {
				glog.Infof("CheckControllerStatus Error while generating http request %d %v",
					stateResp.StatusCode, err)
			}
		} else {
			glog.Errorf("CheckControllerStatus Error while generating http request %v %v", url, err)
		}
		//wait before retry
		time.Sleep(time.Duration(math.Exp(float64(round))*3) * time.Second)
		glog.Errorf("CheckControllerStatus Controller %v Retrying. round %v..!", url, round)
	}
	return true, nil
}

func (avisess *AviSession) restRequestInterfaceResponse(verb string, url string,
	payload interface{}, response interface{}) error {
	tenant := "admin"
	resp, avierror := avisess.restRequest(verb, url, payload, tenant, nil)
	if avierror != nil {
		return avierror.err
	}

	res, rerror := avisess.fetchBody(verb, url, resp)
	if rerror != nil {
		return rerror
	}

	if len(res) == 0 {
		return nil
	} else {
		return json.Unmarshal(res, &response)
	}
}

func (avisess *AviSession) get(uri string, response interface{}) error {
	return avisess.restRequestInterfaceResponse("GET", uri, nil, response)
}

func (avisess *AviSession) post(uri string, payload interface{}, response interface{}) error {
	return avisess.restRequestInterfaceResponse("POST", uri, payload, response)
}

// Utility functions

// GetControllerVersion gets the version number from the Avi Controller
func (avisess *AviSession) GetControllerVersion() (string, error) {
	var resp interface{}

	err := avisess.get("/api/initial-data", &resp)
	if err != nil {
		return "", err
	}
	version := resp.(map[string]interface{})["version"].(map[string]interface{})["Version"].(string)
	return version, nil
}

// Logout performs log out operation of the Avi Controller
func (avisess *AviSession) Logout() error {
	url := avisess.prefix + "logout"
	req, _ := avisess.newAviRequest("POST", url, nil, avisess.tenant)
	_, err := avisess.client.Do(req)
	if err != nil {
		return err
	}
	return nil
}

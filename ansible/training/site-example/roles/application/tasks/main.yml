# This will setup basic VS based on the
# Configuration passed.
---

  - name: Avi Application | Load AVi controller creds
    include_vars:
      file: "{{site_dir}}/vars/creds_unsecure.yml"
  - name:  debug app name
    debug: msg="{{app_name}}"

  - name: Avi Application | Load Application configurations
    include_vars:
      file: "{{site_dir}}/applications/{{ app_name }}/config.yml"
      #name: cloud_config
  - name: load playbooks
    include: "{{outer_item}}.yml"
    when:
      - avi_config[outer_item] is defined
    with_items: "{{ avi_resource_types}}"
    loop_control:
      loop_var: outer_item

  - name: Avi SSLKeyAndCertificate | Upload or Update SSL certificate - always changed due to sensitve field
    avi_sslkeyandcertificate:
      controller: "{{ avi_controller}}"
      username: "{{ avi_username }}"
      password: "{{ avi_password }}"
      tenant: "{{ tenant | default(omit)}}"
      tenant_ref: "{{item.tenant_ref | default(omit)}}"
      state: "{{item.state | default(omit)}}"
      api_version: "{{ api_version | default(omit)}}"
      key: "{{item.key}}"
      certificate: "{{item.certificate}}"
      type: "{{item.type | default('SSL_CERTIFICATE_TYPE_VIRTUALSERVICE')}}"
      name: "{{item.name}}"
    with_items: "{{ avi_sslkeyandcertificate_objs | default([])}}"
    when: (not item.certificate.self_signed or item.certificate.certificate is defined)
    register: ssl_certs

  - name: check certs
    stat:
      path: "{{site_dir}}/applications/{{app_name}}/{{item.name}}.crt"
    register: check_certs
    with_items: "{{ avi_sslkeyandcertificate_objs | default([])}}"
    when:
      - item.certificate.self_signed
      - item.certificate.certificate is undefined

  - name: Avi SSLKeyAndCertificate | create self-signed SSL cert if not present
    command: openssl req -new -nodes -x509 -subj "/C=US/ST=CA/L=San Francisco/O=IT/CN={{ item.1.name }}" -days 3650 -keyout ../applications/"{{ app_name }}"/"{{item.1.name}}".key -out "{{site_dir}}"/applications/"{{ app_name }}"/"{{item.1.name}}".crt -extensions v3_ca creates="{{site_dir}}"/applications/"{{ app_name }}"/"{{item.1.name}}".crt
    args:
      creates: "{{site_dir/applications/app_name/item.1.name.crt}}"
    with_indexed_items: "{{ avi_sslkeyandcertificate_objs | default([])}}"
    when:
      - item.1.certificate.self_signed
      - item.1.certificate.certificate is undefined
      - not "{{check_certs.results[item.0].stat.exists}}"

  - name: Avi SSLKeyAndCertificate | Add self signed certificates
    set_fact:
      keycert:
        api_version: "{{ api_version | default(omit)}}"
        tenant: "{{ tenant | default(omit)}}"
        tenant_ref: "{{item.tenant_ref | default(omit)}}"
        state: "{{item.state | default(omit)}}"
        key: "{{ lookup('file', site_dir~'/applications/'~app_name~'/'~item.name~'.key') }}"
        certificate:
          self_signed: true
          certificate: "{{ lookup('file', site_dir~'/applications/'~app_name~'/'~item.name~'.crt')}}"
        type: SSL_CERTIFICATE_TYPE_VIRTUALSERVICE
        name: "{{item.name}}"
    with_items: "{{ avi_sslkeyandcertificate_objs | default([])}}"
    register: self_signed_certs
    when:
      - item.certificate.self_signed
      - item.certificate.certificate is undefined

  - name: Avi SSLKeyAndCertificate | Create / Update self signed certs
    avi_sslkeyandcertificate:
      controller: "{{ avi_controller}}"
      username: "{{ avi_username }}"
      password: "{{ avi_password }}"
      tenant: "{{ tenant | default(omit)}}"
      tenant_ref: "{{item.tenant_ref | default(omit)}}"
      state: "{{item.state | default(omit)}}"
      api_version: "{{ api_version | default(omit)}}"
      key: "{{item.ansible_facts.keycert.key}}"
      certificate: "{{item.ansible_facts.keycert.certificate}}"
      type: "{{item.ansible_facts.keycert.type | default('SSL_CERTIFICATE_TYPE_VIRTUALSERVICE')}}"
      name: "{{item.ansible_facts.keycert.name}}"
    with_items: "{{self_signed_certs.results | default([])}}"
    when:
      - item.ansible_facts is defined

  - name: Avi Pool | Create or Update Pool
    avi_pool:
      controller: "{{ avi_controller}}"
      username: "{{ avi_username }}"
      password: "{{ avi_password }}"
      api_version: "{{ api_version | default(omit)}}"
      name: "{{item.name}}"
      tenant: "{{ tenant | default(omit)}}"
      tenant_ref: "{{item.tenant_ref | default(omit)}}"
      state: "{{item.state | default(omit)}}"
      health_monitor_refs: "{{ item.health_monitor_refs | default([]) }} "
      cloud_ref: "{{item.cloud_ref | default(omit)}}"
      servers: "{{item.servers | default([])}}"
      application_persistence_profile_ref: "{{item.application_persistence_profile_ref | default(omit)}}"
      enabled: "{{item.enabled | default(omit)}}"
      lb_algorithm: "{{item.lb_algorithm | default(omit)}}"
      ssl_key_and_certificate_ref: "{{item.ssl_key_and_certificate_ref | default(omit)}}"
      ssl_profile_ref: "{{item.ssl_profile_ref|default(omit)}}"
      vrf_ref: "{{item.vrf_ref | default(omit)}}"
    with_items: "{{ avi_pool_objs | default([])}}"

  - name: Avi HTTP Policyset | Create or update HTTP Policies
    avi_httppolicyset:
      controller: "{{ avi_controller}}"
      username: "{{ avi_username }}"
      password: "{{ avi_password }}"
      tenant: "{{ tenant | default(omit)}}"
      state: "{{item.state | default(omit)}}"
      tenant_ref: "{{item.tenant_ref | default(omit)}}"
      api_version: "{{ api_version | default(omit)}}"
      name: "{{item.name}}"
      http_request_policy: "{{ item.http_request_policy }}"
      is_internal_policy: "{{ item.is_internal_policy| default(omit)}}"
    with_items: "{{ avi_httppolicyset_objs | default([]) }} "

  - name: Avi Virtualservice | Create Virtualservices
    avi_virtualservice:
      controller: "{{ avi_controller}}"
      username: "{{ avi_username }}"
      password: "{{ avi_password }}"
      api_version: "{{ api_version | default(omit)}}"
      name: "{{item.name}}"
      pool_ref: "{{item.pool_ref | default(omit)}}"
      cloud_ref: "{{item.cloud_ref | default(omit)}}"
      tenant: "{{ tenant | default(omit)}}"
      tenant_ref: "{{item.tenant_ref | default(omit)}}"
      state: "{{item.state | default(omit)}}"
      vip: "{{item.vip}}"
      services: "{{item.services}}"
      http_policies: "{{ item.http_policies | default(omit)}}"
    with_items: "{{ avi_virtualservice_objs | default([])}}"

  - name: Avi GSLB Service | Create GSLB Service
    avi_gslbservice:
      controller: "{{ avi_controller}}"
      username: "{{ avi_username }}"
      password: "{{ avi_password }}"
      api_version: "{{ api_version | default(omit) }}"
      name: "{{item.name}}"
      enabled: "{{ item.enabled | default(omit) }}"
      health_monitor_scope: "{{ item.health_monitor_scope | default(omit) }}"
      down_response: "{{ item.down_response | default(omit) }}"
      controller_health_status_enabled: "{{ item.controller_health_status_enabled | default(omit) }}"
      groups: "{{ gslb_groups | default(omit) }}"
      health_monitor_refs: "{{ health_monitor_refs | default(omit) }}"
      domain_names: "{{ domain_names | default(omit) }}"
      state: "{{ state | default(omit) }}"
    with_items: "{{ avi_gslbservice_objs | default([]) }}"

